#!/bin/bash
echo "//this code is generated by gen_vector_blas.sh
#pragma once
#include \"../common/monolish_common.hpp\"

namespace monolish {
/**
* @brief
* Basic Linear Algebra Subprograms for Dense Matrix, Sparse Matrix, Vector and
* Scalar
*/
namespace blas {
"

echo "
/**
 * @addtogroup BLASLV1
 * @{
 */
"

## copy
echo "
/**
 * \defgroup copy monolish::blas::copy (vector)
 * @brief vector copy (y=x)
 * @{
 */
/**
 * @brief vector copy (y=x)
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void copy(const $arg1 &x, $arg2 &y);"
    done
  done
done
echo "/**@}*/"

## vecadd
echo "
/**
 * \defgroup vecadd monolish::blas::vecadd
 * @brief element by element addition of vector a and vector b.
 * @{
 */
/**
 * @brief element by element addition of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
echo "void vecadd(const $arg1 &a, const $arg2 &b, $arg3 &y);"
      done
    done
  done
done
echo "/**@}*/"

## vecsub
echo "
/**
 * \defgroup vecsub monolish::blas::vecsub
 * @brief element by element subtract of vector a and vector b.
 * @{
 */
/**
 * @brief element by element subtract of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
echo "void vecsub(const $arg1 &a, const $arg2 &b, $arg3 &y);"
      done
    done
  done
done
echo "/**@}*/"

## times scalar
echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
/**
 * @brief element by element multiplication: y = alpha * x
 * @param alpha scalar value
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
         for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
             echo "void times(const $prec alpha, const $arg1 &a, $arg2 &y);"
         done
     done
 done

echo "/**@}*/"
echo ""

## times vector
echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
/**
 * @brief element by element addition of vector a and vector b.
 * @param a monolish vector (size N)
 * @param b monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
         for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
             for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
                 echo "void times(const $arg1 &a, const $arg2 &b, $arg3 &y);"
             done
         done
     done
 done
echo "/**@}*/"

## asum
echo "
/**
 * \defgroup asum monolish::blas::asum
 * @brief vector absolute sum
 * @{
 */
/**
 * @brief vector absolute sum
 * @param x monolish vector (size N)
 * @param ans The result of the asum
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "void asum(const $arg1 &x, $prec &ans);"
  done
done


## asum
echo "
/**
 * @brief vector absolute sum
 * @param x monolish vector (size N)
 * @return The result of the asum
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "[[nodiscard]] $prec asum(const $arg1 &x);"
  done
done
echo "/**@}*/"

## sum
echo "
/**
 * \defgroup sum monolish::blas::sum
 * @brief vector sum
 * @{
 */
/**
 * @brief vector sum
 * @param x monolish vector (size N)
 * @param ans The result of the sum
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "void sum(const $arg1 &x, $prec &ans);"
  done
done


## sum
echo "
/**
 * @brief vector\<$prec\> sum
 * @param x monolish vector\<$prec\> (size N)
 * @return The result of the sum
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "[[nodiscard]] $prec sum(const $arg1 &x);"
  done
done
echo "/**@}*/"

## axpy
echo "
/**
 * \defgroup axpy monolish::blas::axpy
 * @brief axpy: y = ax + y
 * @{
 */
/**
 * @brief axpy: y = ax + y
 * @param alpha scalar value
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void axpy(const $prec alpha, const $arg1 &x, $arg2 &y);"
    done
  done
done
echo "/**@}*/"
echo ""

## axpyz
echo "
/**
 * \defgroup axpyz monolish::blas::axpyz
 * @brief axpy: z = ax + y
 * @{
 */
/**
 * @brief axpyz: z = ax + y
 * @param alpha scalar value
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @param z monolish vector (size N)
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        echo "void axpyz(const $prec alpha, const $arg1 &x, const $arg2 &y, $arg3 &z);"
      done
    done
  done
done
echo "/**@}*/"
echo ""

## dot
echo "
/**
 * \defgroup dot monolish::blas::dot
 * @brief inner product (dot)
 * @{
 */
/**
 * @brief inner product (dot)
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @param ans The result of the inner product product of x and y
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void dot(const $arg1 &x, const $arg2 &y, $prec &ans);"
    done
  done
done

echo ""

## dot
echo "
/**
 * @brief inner product (dot)
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @return The result of the inner product product of x and y
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "[[nodiscard]] $prec dot(const $arg1 &x, const $arg2 &y);"
    done
  done
done

echo "/**@}*/"
echo ""

## nrm1
echo "
/**
 * \defgroup nrm1 monolish::blas::nrm1
 * @brief nrm1: sum(abs(x[0:N]))
 * @{
 */
/**
 * @brief nrm1: sum(abs(x[0:N]))
 * @param x monolish vector (size N)
 * @param ans The result of the nrm1
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "void nrm1(const $arg1 &x, $prec &ans);"
  done
done

echo ""

## nrm1
echo "
/**
 * @brief nrm1: sum(abs(x[0:N]))
 * @param x monolish vector (size N)
 * @return The result of the nrm1
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "[[nodiscard]] $prec nrm1(const $arg1 &x);"
  done
done

echo "/**@}*/"
echo ""

## nrm2
echo "
/**
 * \defgroup nrm2 monolish::blas::nrm2
 * @brief nrm2: ||x||_2
 * @{
 */
/**
 * @brief nrm2: ||x||_2
 * @param x monolish vector (size N)
 * @param ans The result of the nrm2
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "void nrm2(const $arg1 &x, $prec &ans);"
  done
done

echo ""

## nrm2
echo "
/**
 * @brief nrm2: ||x||_2
 * @param x monolish vector (size N)
 * @return The result of the nrm2
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    echo "[[nodiscard]] $prec nrm2(const $arg1 &x);"
  done
done

echo "/**@}*/"
echo ""

## scal
echo "
/**
 * \defgroup scal monolish::blas::scal
 * @brief scal: x = alpha * x
 * @{
 */
/**
 * @brief scal: x = alpha * x
 * @param alpha scalar value
 * @param x monolish vector (size N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void scal(const $prec alpha, $arg1 &x);"
  done
done

echo "/**@}*/"
echo ""

## xpay
echo "
/**
 * \defgroup xpay monolish::blas::xpay
 * @brief xpay: y = x + ay
 * @{
 */
/**
 * @brief xpay: y = x + ay
 * @param alpha scalar value
 * @param x monolish vector (size N)
 * @param y monolish vector (size N)
 * @note
 * - # of computation: 2N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void xpay(const $prec alpha, const $arg1 &x, $arg2 &y);"
    done
  done
done

echo "/**@}*/"
echo "/**@}*/"
echo "}"
echo "}"
