#!/bin/bash
echo "//this code is generated by gen_tensmat_blas.sh
#pragma once
#include \"../common/monolish_common.hpp\"

namespace monolish {
/**
* @brief
* Basic Linear Algebra Subprograms for tensor_Dense Tensor, tensor_Dense Matrix, Sparse Matrix, Vector and
* Scalar
*/
namespace blas {
"

echo "
/**
 * @addtogroup BLASLV3
 * @{
 */
"

## tensmat tensor_Dense
echo "
/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor (size M x N)
 * @param x Dense matrix (size M)
 * @param y tensor_Dense tensor (size M)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in matrix::Dense\<$prec\>; do
    echo "void tensmat(const tensor::tensor_Dense<$prec> &A, const $arg1 &x, tensor::tensor_Dense<$prec> &y);"
  done
done
echo "/**@}*/"

echo "
/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor (size M x N)
 * @param x Dense matrix (size M)
 * @param y tensor_Dense tensor (size M)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in matrix::Dense\<$prec\>; do
    echo "void tensmat(const $prec &a, const tensor::tensor_Dense<$prec> &A, const $arg1 &x, const $prec &b, tensor::tensor_Dense<$prec> &y);"
  done
done
echo "/**@}*/"

echo "/**@}*/"
echo "/**@}*/"
echo "}"
echo "}"
