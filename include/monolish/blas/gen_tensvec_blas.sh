#!/bin/bash
echo "//this code is generated by gen_tensvec_blas.sh
#pragma once
#include \"../common/monolish_common.hpp\"

namespace monolish {
/**
* @brief
* Basic Linear Algebra Subprograms for tensor_Dense Tensor, tensor_Dense Matrix, Sparse Matrix, Vector and
* Scalar
*/
namespace blas {
"

echo "
/**
 * @addtogroup BLASLV2
 * @{
 */
"

## tensor tensor_Dense times_row
echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
 /**
 * @brief Row-wise tensor_Dense tensor and vector times: 
 * C[i][j] = A[i][j] * x[j]
 * @param A tensor_Dense tensor (size M x N)
 * @param x monolish vector (size M)
 * @param C tensor_Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
         echo "void times_row(const tensor::tensor_Dense<$prec> &A, const $arg1 &x, tensor::tensor_Dense<$prec> &C);"
     done
 done
 echo "/**@}*/"

echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
 /**
 * @brief Specified row of dense tensor and vector times: 
 * C[num][j] = A[num][j] * x[j]
 * @param A tensor_Dense tensor (size M x N)
 * @param num row number
 * @param x monolish vector (size M)
 * @param C tensor_Dense tensor (size M x N)
 * @note
 * - # of computation: N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
         echo "void times_row(const tensor::tensor_Dense<$prec> &A, const size_t num, const $arg1 &x, tensor::tensor_Dense<$prec> &C);"
     done
 done
 echo "/**@}*/"

## tensor tensor_Dense times_col
echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
 /**
 * @brief Column-wise tensor_Dense tensor and vector times: 
 * C[i][j] = A[i][j] * x[i]
 * @param A tensor_Dense tensor (size M x N)
 * @param x monolish vector (size M)
 * @param C tensor_Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
         echo "void times_col(const tensor::tensor_Dense<$prec> &A, const $arg1 &x, tensor::tensor_Dense<$prec> &C);"
     done
 done
 echo "/**@}*/"

echo "
/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
 /**
 * @brief Specified col of dense tensor and vector times: 
 * C[i][num] = A[i][num] * x[j]
 * @param A tensor_Dense tensor (size M x N)
 * @param num column number
 * @param x monolish vector (size M)
 * @param C tensor_Dense tensor (size M x N)
 * @note
 * - # of computation: M
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
 for prec in double float; do
     for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
         echo "void times_col(const tensor::tensor_Dense<$prec> &A, const size_t num, const $arg1 &x, tensor::tensor_Dense<$prec> &C);"
     done
 done
 echo "/**@}*/"

## tensvec tensor_Dense
echo "
/**
 * \defgroup tensvec_dense monolish::blas::tensvec (tensor_Dense)
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor (size M x N)
 * @param x monolish vector (size M)
 * @param y monolish vector (size M)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ "
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
    echo "void tensvec(const tensor::tensor_Dense<$prec> &A, const $arg1 &x, tensor::tensor_Dense<$prec> &y);"
  done
done
echo "/**@}*/"

## tensvec_* tensor_Dense
for trans in N T; do
    echo "
    /**
    * \defgroup tensvec_dense_$trans monolish::blas::tensvec_$trans (tensor_Dense)
    * @brief tensor_Dense tensor and vector multiplication: y = A^$trans x
    * @{
    */
    /**
    * @brief tensor_Dense tensor and vector multiplication: y = A^$trans x
    * @param A tensor_Dense tensor (size M x N)
    * @param x monolish vector (size M)
    * @param y monolish vector (size M)
    * @note
    * - # of computation: MN
    * - Multi-threading: true
    * - GPU acceleration: true
    *    - # of data transfer: 0
    */ "
    for prec in double float; do
        for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<tensor::tensor_Dense\<$prec\>,$prec\>; do
            echo "void tensvec_$trans(const tensor::tensor_Dense<$prec> &A, const $arg1 &x, tensor::tensor_Dense<$prec> &y);"
        done
    done
echo "/**@}*/"
done

echo "/**@}*/"
echo "/**@}*/"
echo "}"
echo "}"
