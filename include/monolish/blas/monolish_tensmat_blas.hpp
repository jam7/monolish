// this code is generated by gen_tensmat_blas.sh
#pragma once
#include "../common/monolish_common.hpp"

namespace monolish {
/**
 * @brief
 * Basic Linear Algebra Subprograms for tensor_Dense Tensor, tensor_Dense
 * Matrix, Sparse Matrix, Vector and Scalar
 */
namespace blas {

/**
 * @addtogroup BLASLV3
 * @{
 */

/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor (size M x N)
 * @param x Dense matrix (size M)
 * @param y tensor_Dense tensor (size M)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void tensmat(const tensor::tensor_Dense<double> &A,
             const matrix::Dense<double> &x, tensor::tensor_Dense<double> &y);
void tensmat(const tensor::tensor_Dense<float> &A,
             const matrix::Dense<float> &x, tensor::tensor_Dense<float> &y);
/**@}*/

/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor (size M x N)
 * @param x Dense matrix (size M)
 * @param y tensor_Dense tensor (size M)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void tensmat(const double &a, const tensor::tensor_Dense<double> &A,
             const matrix::Dense<double> &x, const double &b,
             tensor::tensor_Dense<double> &y);
void tensmat(const float &a, const tensor::tensor_Dense<float> &A,
             const matrix::Dense<float> &x, const float &b,
             tensor::tensor_Dense<float> &y);
/**@}*/
/**@}*/
/**@}*/
} // namespace blas
} // namespace monolish
