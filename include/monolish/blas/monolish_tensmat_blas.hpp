// this code is generated by gen_tensmat_blas.sh
#pragma once
#include "../common/monolish_common.hpp"

namespace monolish {
/**
 * @brief
 * Basic Linear Algebra Subprograms for Dense Matrix, Sparse Matrix, Vector and
 * Scalar
 */
namespace blas {

/**
 * @addtogroup BLASLV3
 * @{
 */

/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and matrix multiplication: y = Ax
 * @{
 */
/**
 * @brief tensor_Dense tensor and matrix multiplication: ex. y_{ijl} = A_{ijk}
 * x_{kl}
 * @param A tensor_Dense tensor
 * @param x Dense matrix
 * @param y tensor_Dense tensor
 * @note
 * - # of computation: ?
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void tensmat(const tensor::tensor_Dense<double> &A,
             const matrix::Dense<double> &x, tensor::tensor_Dense<double> &y);
void tensmat(const tensor::tensor_Dense<float> &A,
             const matrix::Dense<float> &x, tensor::tensor_Dense<float> &y);
/**@}*/

/**
 * \defgroup tensmat_dense monolish::blas::tensmat (tensor_Dense)
 * @brief tensor_Dense tensor and matrix multiplication: ex. y_{ijl} = a A_{ijk}
 * x_{kl} + b y_{ijl}
 * @{
 */
/**
 * @brief tensor_Dense tensor and vector multiplication: y = Ax
 * @param A tensor_Dense tensor
 * @param x Dense matrix
 * @param y tensor_Dense tensor
 * @note
 * - # of computation: ?
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */
void tensmat(const double &a, const tensor::tensor_Dense<double> &A,
             const matrix::Dense<double> &x, const double &b,
             tensor::tensor_Dense<double> &y);
void tensmat(const float &a, const tensor::tensor_Dense<float> &A,
             const matrix::Dense<float> &x, const float &b,
             tensor::tensor_Dense<float> &y);
/**@}*/
/**@}*/
/**@}*/
} // namespace blas
} // namespace monolish
