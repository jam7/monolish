//this code is generated by gen_tensor_blas.sh
#pragma once
#include "../common/monolish_common.hpp"

namespace monolish {
/**
* @brief
* Basic Linear Algebra Subprograms for Dense Tensor, Dense Matrix, Sparse Matrix, Vector and
* Scalar
*/
namespace blas {


/**
 * @addtogroup BLASLV3
 * @{
 */


/**
 * \defgroup mat_copy_Dense monolish::blas::copy (tensor_Dense)
 * @brief Dense tensor copy (C=A)
 * @{
 */
 /**
 * @brief Dense tensor copy (C=A)
 * @param A monolish Dense tensor (size M x N)
 * @param C monolish Dense tensor (size M x N)
 * @note
 * - # of computation: M x N
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
 */ 
void copy(const tensor::tensor_Dense<double> &A, tensor::tensor_Dense<double> &C);
void copy(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
/**@}*/

/**
 * \defgroup mscal_dense monolish::blas::mscal (tensor_Dense)
 * @brief Dense tensor scal: A = alpha * A
 * @{
 */
/**
 * @brief Dense tensor scal: A = alpha * A
 * @param alpha scalar value
 * @param A Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void mscal(const double alpha, tensor::tensor_Dense<double> &A);
void mscal(const float alpha, tensor::tensor_Dense<float> &A);
/**@}*/

/**
 * \defgroup times monolish::blas::times
 * @brief element by element multiplication
 * @{
 */
/**
 * @brief Dense tensor times: C = alpha * A
 * @param alpha scalar value
 * @param A Dense tensor (size M x N)
 * @param C Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void times(const double alpha, const tensor::tensor_Dense<double> &A, tensor::tensor_Dense<double> &C);
void times(const float alpha, const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C);
/**@}*/

/**
 * \defgroup madd_dense monolish::blas::matadd (tensor_Dense)
 * @brief Dense tensor addition: C = A + B
 * @{
 */
/**
 * @brief Dense tensor addition: C = A + B
 * @param A Dense tensor (size M x N)
 * @param B Dense tensor (size M x N)
 * @param C Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void matadd(const tensor::tensor_Dense<double> &A, const tensor::tensor_Dense<double> &B, tensor::tensor_Dense<double> &C);
void matadd(const tensor::tensor_Dense<float> &A, const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
/**@}*/


/**
 * \defgroup msub_dense monolish::blas::matsub (tensor_Dense)
 * @brief Dense tensor subtract: C = A - B
 * @{
 */
/**
 * @brief Dense tensor subtract: C = A - B
 * @param A Dense tensor (size M x N)
 * @param B Dense tensor (size M x N)
 * @param C Dense tensor (size M x N)
 * @note
 * - # of computation: MN
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void matsub(const tensor::tensor_Dense<double> &A, const tensor::tensor_Dense<double> &B, tensor::tensor_Dense<double> &C);
void matsub(const tensor::tensor_Dense<float> &A, const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
/**@}*/


/**
 * \defgroup mm_dense monolish::blas::tensmul (tensor_Dense, tensor_Dense, tensor_Dense)
 * @brief Dense tensor multiplication: C = AB
 * @{
 */
/**
 * @brief Dense tensor multiplication: C = AB
 * @param A Dense tensor (size M x K)
 * @param B Dense tensor (size K x N)
 * @param C Dense tensor (size M x N)
 * @note
 * - # of computation: 2MNK
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void tensmul(const tensor::tensor_Dense<double> &A, const tensor::tensor_Dense<double> &B, tensor::tensor_Dense<double> &C);
void tensmul(const tensor::tensor_Dense<float> &A, const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C);
/**@}*/

/**
 * \defgroup mm_dense monolish::blas::tensmul (Float, tensor_Dense, tensor_Dense, Float, tensor_Dense)
 * @brief Dense tensor multiplication: C = aAB+bC
 * @{
 */
/**
 * @brief Dense tensor multiplication: C = aAB+bC
 * @param a Float
 * @param A Dense tensor (size M x K)
 * @param B Dense tensor (size K x N)
 * @param b Float
 * @param C Dense tensor (size M x N)
 * @note
 * - # of computation: 2MNK
 * - Multi-threading: true
 * - GPU acceleration: true
 *    - # of data transfer: 0
*/ 
void tensmul(const double &a, const tensor::tensor_Dense<double> &A, const tensor::tensor_Dense<double> &B, const double &b, tensor::tensor_Dense<double> &C);
void tensmul(const float &a, const tensor::tensor_Dense<float> &A, const tensor::tensor_Dense<float> &B, const float &b, tensor::tensor_Dense<float> &C);
/**@}*/
}
}
