// This code is generated by gen_mataddsub.sh
#include "dense_mataddsub.hpp"
#include "crs_mataddsub.hpp"
#include "linearoperator_mataddsub.hpp"

namespace monolish::blas {

void matadd(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matadd_core(A, B, C); }
void matadd(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matadd_core(A, B, C); }

void matadd(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C) { matadd_core(A, B, C); }

void matadd(const matrix::LinearOperator<double> &A, const matrix::LinearOperator<double> &B, matrix::LinearOperator<double> &C) { matadd_core(A, B, C); }
void matadd(const matrix::LinearOperator<float> &A, const matrix::LinearOperator<float> &B, matrix::LinearOperator<float> &C) { matadd_core(A, B, C); }

void matsub(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const matrix::Dense<double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<vector<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<matrix::Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, matrix::Dense<double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<vector<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<matrix::Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view_Dense<tensor::tensor_Dense<double>,double> &B, view_Dense<tensor::tensor_Dense<double>,double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const matrix::Dense<float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<vector<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<matrix::Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const matrix::Dense<float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<vector<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<matrix::Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, matrix::Dense<float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<vector<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<matrix::Dense<float>,float> &C) { matsub_core(A, B, C); }
void matsub(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view_Dense<tensor::tensor_Dense<float>,float> &B, view_Dense<tensor::tensor_Dense<float>,float> &C) { matsub_core(A, B, C); }

void matsub(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C) { matsub_core(A, B, C); }

void matsub(const matrix::LinearOperator<double> &A, const matrix::LinearOperator<double> &B, matrix::LinearOperator<double> &C) { matsub_core(A, B, C); }
void matsub(const matrix::LinearOperator<float> &A, const matrix::LinearOperator<float> &B, matrix::LinearOperator<float> &C) { matsub_core(A, B, C); }
}
