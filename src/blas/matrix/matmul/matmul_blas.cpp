//this code is generated by gen_matvec_blas.sh
#include "../../../../include/monolish_blas.hpp"
#include "../../../internal/monolish_internal.hpp"
#include "dense-dense_matmul.hpp"
#include "crs-dense_matmul.hpp"
#include "linearoperator-dense_matmul.hpp"
#include "linearoperator-linearoperator_matmul.hpp"

namespace monolish::blas {

void matmul(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){Dense_Dense_Dmatmul_core(A, B, C, false, false);}
void matmul(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){Dense_Dense_Smatmul_core(A, B, C, false, false);}

void matmul_NN(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){Dense_Dense_Dmatmul_core(A, B, C, false, false);}
void matmul_NN(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){Dense_Dense_Smatmul_core(A, B, C, false, false);}
void matmul_NT(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){Dense_Dense_Dmatmul_core(A, B, C, false, true);}
void matmul_NT(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){Dense_Dense_Smatmul_core(A, B, C, false, true);}
void matmul_TN(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){Dense_Dense_Dmatmul_core(A, B, C, true, false);}
void matmul_TN(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){Dense_Dense_Smatmul_core(A, B, C, true, false);}
void matmul_TT(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){Dense_Dense_Dmatmul_core(A, B, C, true, true);}
void matmul_TT(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){Dense_Dense_Smatmul_core(A, B, C, true, true);}

}
