// this code is generated by gen_matvec_blas.sh
#include "../../../../include/monolish_blas.hpp"
#include "../../../internal/monolish_internal.hpp"
#include "crs_matvec.hpp"
#include "dense_matvec.hpp"
#include "linearoperator_matvec.hpp"

namespace monolish::blas {

void matvec(const matrix::Dense<double> &A, const vector<double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A, const vector<double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A, const vector<double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const vector<double> &x, view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const vector<double> &x, view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const vector<double> &x, view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A, const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<double>, double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A, const vector<float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A, const vector<float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A, const vector<float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A, const vector<float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A, const vector<float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A, const vector<float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A, const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A, const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::Dense<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<vector<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<matrix::Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const view_Dense<tensor::tensor_Dense<float>, float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}

void matvec_N(const matrix::Dense<double> &A, const vector<double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_T(const matrix::Dense<double> &A, const vector<double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x, view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A, const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<double>, double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::Dense<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<vector<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<matrix::Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const view_Dense<tensor::tensor_Dense<float>, float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}

void matvec(const matrix::CRS<double> &A, const vector<double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A, const vector<double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A, const vector<double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A, const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const vector<float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const vector<float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const vector<float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const view1D<vector<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A, const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec(const matrix::CRS<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}

void matvec_N(const matrix::CRS<double> &A, const vector<double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_N(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, false);
}
void matvec_T(const matrix::CRS<double> &A, const vector<double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A, const vector<double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x, vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<vector<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<matrix::Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              vector<double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<vector<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<matrix::Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<double> &A,
              const view1D<tensor::tensor_Dense<double>, double> &x,
              view1D<tensor::tensor_Dense<double>, double> &y) {
  Dmatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A, const vector<float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A, const vector<float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<vector<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<matrix::Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              vector<float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<vector<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<matrix::Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}
void matvec_T(const matrix::CRS<float> &A,
              const view1D<tensor::tensor_Dense<float>, float> &x,
              view1D<tensor::tensor_Dense<float>, float> &y) {
  Smatvec_core(A, x, y, true);
}

void matvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
            vector<double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
            view1D<vector<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<vector<double>, double> &x, vector<double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<vector<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<vector<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<matrix::Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            vector<double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<vector<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<matrix::Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<double> &A,
            const view1D<tensor::tensor_Dense<double>, double> &x,
            view1D<tensor::tensor_Dense<double>, double> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
            vector<float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
            view1D<vector<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<vector<float>, float> &x, vector<float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<vector<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<vector<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<matrix::Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            vector<float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<vector<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<matrix::Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void matvec(const matrix::LinearOperator<float> &A,
            const view1D<tensor::tensor_Dense<float>, float> &x,
            view1D<tensor::tensor_Dense<float>, float> &y) {
  matvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
             vector<double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
             view1D<vector<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
             view1D<matrix::Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A, const vector<double> &x,
             view1D<tensor::tensor_Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<vector<double>, double> &x, vector<double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<vector<double>, double> &x,
             view1D<vector<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<vector<double>, double> &x,
             view1D<matrix::Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<vector<double>, double> &x,
             view1D<tensor::tensor_Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<matrix::Dense<double>, double> &x,
             vector<double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<matrix::Dense<double>, double> &x,
             view1D<vector<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<matrix::Dense<double>, double> &x,
             view1D<matrix::Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<matrix::Dense<double>, double> &x,
             view1D<tensor::tensor_Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<tensor::tensor_Dense<double>, double> &x,
             vector<double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<tensor::tensor_Dense<double>, double> &x,
             view1D<vector<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<tensor::tensor_Dense<double>, double> &x,
             view1D<matrix::Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<double> &A,
             const view1D<tensor::tensor_Dense<double>, double> &x,
             view1D<tensor::tensor_Dense<double>, double> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
             vector<float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
             view1D<vector<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
             view1D<matrix::Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A, const vector<float> &x,
             view1D<tensor::tensor_Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<vector<float>, float> &x, vector<float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<vector<float>, float> &x,
             view1D<vector<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<vector<float>, float> &x,
             view1D<matrix::Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<vector<float>, float> &x,
             view1D<tensor::tensor_Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<matrix::Dense<float>, float> &x,
             view1D<vector<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<matrix::Dense<float>, float> &x,
             view1D<matrix::Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<matrix::Dense<float>, float> &x,
             view1D<tensor::tensor_Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<tensor::tensor_Dense<float>, float> &x,
             vector<float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<tensor::tensor_Dense<float>, float> &x,
             view1D<vector<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<tensor::tensor_Dense<float>, float> &x,
             view1D<matrix::Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
void rmatvec(const matrix::LinearOperator<float> &A,
             const view1D<tensor::tensor_Dense<float>, float> &x,
             view1D<tensor::tensor_Dense<float>, float> &y) {
  rmatvec_core(A, x, y);
}
} // namespace monolish::blas
