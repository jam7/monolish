// This code is generated by gen_times.sh
#include "dense_times.hpp"
#include "dense_line_times.hpp"
#include "crs_times.hpp"
#include "crs_line_times.hpp"

namespace monolish::blas {

void times(const double alpha, const matrix::Dense<double> &A, matrix::Dense<double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const matrix::Dense<double> &A, view_Dense<vector<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const matrix::Dense<double> &A, view_Dense<matrix::Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const matrix::Dense<double> &A, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<vector<double>,double> &A, matrix::Dense<double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<vector<double>,double> &A, view_Dense<vector<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<vector<double>,double> &A, view_Dense<matrix::Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<vector<double>,double> &A, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<matrix::Dense<double>,double> &A, matrix::Dense<double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<matrix::Dense<double>,double> &A, view_Dense<vector<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<matrix::Dense<double>,double> &A, view_Dense<matrix::Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<matrix::Dense<double>,double> &A, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<tensor::tensor_Dense<double>,double> &A, matrix::Dense<double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<tensor::tensor_Dense<double>,double> &A, view_Dense<vector<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<tensor::tensor_Dense<double>,double> &A, view_Dense<matrix::Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const view_Dense<tensor::tensor_Dense<double>,double> &A, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_core(alpha, A, C);}
void times(const double alpha, const matrix::CRS<double> &A, matrix::CRS<double> &C) { times_core(alpha, A, C);}
void times(const float alpha, const matrix::Dense<float> &A, matrix::Dense<float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const matrix::Dense<float> &A, view_Dense<vector<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const matrix::Dense<float> &A, view_Dense<matrix::Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const matrix::Dense<float> &A, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<vector<float>,float> &A, matrix::Dense<float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<vector<float>,float> &A, view_Dense<vector<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<vector<float>,float> &A, view_Dense<matrix::Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<vector<float>,float> &A, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<matrix::Dense<float>,float> &A, matrix::Dense<float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<matrix::Dense<float>,float> &A, view_Dense<vector<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<matrix::Dense<float>,float> &A, view_Dense<matrix::Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<matrix::Dense<float>,float> &A, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<tensor::tensor_Dense<float>,float> &A, matrix::Dense<float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<tensor::tensor_Dense<float>,float> &A, view_Dense<vector<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<tensor::tensor_Dense<float>,float> &A, view_Dense<matrix::Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const view_Dense<tensor::tensor_Dense<float>,float> &A, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_core(alpha, A, C);}
void times(const float alpha, const matrix::CRS<float> &A, matrix::CRS<float> &C) { times_core(alpha, A, C);}

void times_row(const matrix::Dense<double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, x, C);}
void times_row(const matrix::CRS<double> &A, const vector<double> &x, matrix::CRS<double> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<double> &A, const view1D<vector<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, x, C);}
void times_row(const matrix::CRS<float> &A, const vector<float> &x, matrix::CRS<float> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<float> &A, const view1D<vector<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, x, C);}
void times_row(const matrix::CRS<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, x, C);}

void times_col(const matrix::Dense<double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, x, C);}
void times_col(const matrix::CRS<double> &A, const vector<double> &x, matrix::CRS<double> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<double> &A, const view1D<vector<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<double> &A, const view1D<matrix::Dense<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<double> &A, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::Dense<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, x, C);}
void times_col(const matrix::CRS<float> &A, const vector<float> &x, matrix::CRS<float> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<float> &A, const view1D<vector<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<float> &A, const view1D<matrix::Dense<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, x, C);}
void times_col(const matrix::CRS<float> &A, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, x, C);}

void times_row(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<double> &A, const size_t num, const vector<double> &x, matrix::CRS<double> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::CRS<double> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<float> &A, const size_t num, const vector<float> &x, matrix::CRS<float> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, num, x, C);}
void times_row(const matrix::CRS<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::CRS<float> &C) { times_row_core(A, num, x, C);}

void times_col(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const vector<double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<vector<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::Dense<double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<vector<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<matrix::Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<double>,double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, view_Dense<tensor::tensor_Dense<double>,double> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<double> &A, const size_t num, const vector<double> &x, matrix::CRS<double> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<double> &A, const size_t num, const view1D<vector<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<double> &A, const size_t num, const view1D<matrix::Dense<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<double> &A, const size_t num, const view1D<tensor::tensor_Dense<double>,double> &x, matrix::CRS<double> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::Dense<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<vector<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<matrix::Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const vector<float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<vector<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::Dense<float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<vector<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<matrix::Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const view_Dense<tensor::tensor_Dense<float>,float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, view_Dense<tensor::tensor_Dense<float>,float> &C){ times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<float> &A, const size_t num, const vector<float> &x, matrix::CRS<float> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<float> &A, const size_t num, const view1D<vector<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<float> &A, const size_t num, const view1D<matrix::Dense<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, num, x, C);}
void times_col(const matrix::CRS<float> &A, const size_t num, const view1D<tensor::tensor_Dense<float>,float> &x, matrix::CRS<float> &C) { times_col_core(A, num, x, C);}
}
