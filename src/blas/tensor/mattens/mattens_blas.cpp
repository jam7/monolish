// this code is generated by gen_mattens_blas.sh
#include "../../../../include/monolish_blas.hpp"
#include "../../../internal/monolish_internal.hpp"
#include "crs-tensor_dense_mattens.hpp"
#include "dense-tensor_dense_mattens.hpp"

namespace monolish::blas {

void mattens(const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const matrix::Dense<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a, const view_Dense<vector<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<matrix::Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const double &a,
             const view_Dense<tensor::tensor_Dense<double>, double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  Dense_tensor_Dense_Dmattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const matrix::Dense<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<vector<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a, const view_Dense<matrix::Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}
void mattens(const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C, false, false);
}
void mattens(const float &a,
             const view_Dense<tensor::tensor_Dense<float>, float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  Dense_tensor_Dense_Smattens_core(a, A, B, b, C, false, false);
}

void mattens(const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B,
             tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const tensor::tensor_Dense<double> &B, const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<vector<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<matrix::Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, tensor::tensor_Dense<double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b, view_tensor_Dense<vector<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<matrix::Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(1.0, A, B, 0.0, C);
}
void mattens(const double &a, const matrix::CRS<double> &A,
             const view_tensor_Dense<tensor::tensor_Dense<double>, double> &B,
             const double &b,
             view_tensor_Dense<tensor::tensor_Dense<double>, double> &C) {
  CRS_tensor_Dense_Dmattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A, const tensor::tensor_Dense<float> &B,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A, const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A, const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A, const tensor::tensor_Dense<float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const tensor::tensor_Dense<float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<vector<float>, float> &B, const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<matrix::Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, tensor::tensor_Dense<float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b, view_tensor_Dense<vector<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<matrix::Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}
void mattens(const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(1.0, A, B, 0.0, C);
}
void mattens(const float &a, const matrix::CRS<float> &A,
             const view_tensor_Dense<tensor::tensor_Dense<float>, float> &B,
             const float &b,
             view_tensor_Dense<tensor::tensor_Dense<float>, float> &C) {
  CRS_tensor_Dense_Smattens_core(a, A, B, b, C);
}

} // namespace monolish::blas
