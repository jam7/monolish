// This code is generated by gen_vector_blas.sh
#include "../../../include/monolish_blas.hpp"
#include "../../internal/monolish_internal.hpp"
#include "asum.hpp"
#include "axpy.hpp"
#include "axpyz.hpp"
#include "copy.hpp"
#include "dot.hpp"
#include "nrm1.hpp"
#include "nrm2.hpp"
#include "scal.hpp"
#include "sum.hpp"
#include "times.hpp"
#include "vecadd.hpp"
#include "vecsub.hpp"
#include "xpay.hpp"

namespace monolish::blas {

void vecadd(const vector<double> &a, const vector<double> &b,
            vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a, const vector<double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a, const vector<double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a, const view1D<vector<double>, double> &b,
            vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a, const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a, const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a, const vector<double> &b,
            vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a, const vector<double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a, const vector<double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const vector<float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const vector<float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const vector<float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const view1D<vector<float>, float> &b,
            vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a, const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a, const vector<float> &b,
            vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a, const vector<float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a, const vector<float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecadd_core(a, b, y);
}
void vecadd(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecadd_core(a, b, y);
}
//////////////////////////////////
void vecsub(const vector<double> &a, const vector<double> &b,
            vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a, const vector<double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a, const vector<double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a, const view1D<vector<double>, double> &b,
            vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a, const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a, const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a, const vector<double> &b,
            vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a, const vector<double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a, const vector<double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const vector<double> &b, view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<vector<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<vector<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<double>, double> &a,
            const view1D<matrix::Dense<double>, double> &b,
            view1D<matrix::Dense<double>, double> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const vector<float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const vector<float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const vector<float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const view1D<vector<float>, float> &b,
            vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a, const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const vector<float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a, const vector<float> &b,
            vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a, const vector<float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a, const vector<float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<vector<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const vector<float> &b, view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<vector<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<vector<float>, float> &y) {
  vecsub_core(a, b, y);
}
void vecsub(const view1D<matrix::Dense<float>, float> &a,
            const view1D<matrix::Dense<float>, float> &b,
            view1D<matrix::Dense<float>, float> &y) {
  vecsub_core(a, b, y);
}
//////////////////////////////////
void times(const double &alpha, const vector<double> &b, vector<double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const vector<double> &b,
           view1D<vector<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const vector<double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<vector<double>, double> &b,
           vector<double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<vector<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<vector<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<matrix::Dense<double>, double> &b,
           vector<double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<matrix::Dense<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const double &alpha, const view1D<matrix::Dense<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const vector<float> &b, vector<float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const vector<float> &b,
           view1D<vector<float>, float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const vector<float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<vector<float>, float> &b,
           vector<float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<vector<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<vector<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<matrix::Dense<float>, float> &b,
           vector<float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<matrix::Dense<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(alpha, b, y);
}
void times(const float &alpha, const view1D<matrix::Dense<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(alpha, b, y);
}
//////////////////////////////////
void times(const vector<double> &a, const vector<double> &b,
           vector<double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a, const vector<double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a, const vector<double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a, const view1D<vector<double>, double> &b,
           vector<double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a, const view1D<vector<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a, const view1D<vector<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a,
           const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a, const vector<double> &b,
           vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a, const vector<double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a, const vector<double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<vector<double>, double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<vector<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<vector<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const vector<double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const vector<double> &b, view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const vector<double> &b, view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<vector<double>, double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<vector<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<vector<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b, vector<double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<vector<double>, double> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<double>, double> &a,
           const view1D<matrix::Dense<double>, double> &b,
           view1D<matrix::Dense<double>, double> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const vector<float> &b, vector<float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const vector<float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const vector<float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<vector<float>, float> &b,
           vector<float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<vector<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<vector<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
           vector<float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const vector<float> &a, const view1D<matrix::Dense<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a, const vector<float> &b,
           vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a, const vector<float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a, const vector<float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<vector<float>, float> &b, vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<vector<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<vector<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<vector<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
           vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a, const vector<float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<vector<float>, float> &b, vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<vector<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<vector<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b, vector<float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b,
           view1D<vector<float>, float> &y) {
  times_core(a, b, y);
}
void times(const view1D<matrix::Dense<float>, float> &a,
           const view1D<matrix::Dense<float>, float> &b,
           view1D<matrix::Dense<float>, float> &y) {
  times_core(a, b, y);
}
//////////////////////////////////
void copy(const vector<double> &x, vector<double> &y) { copy_core(x, y); }
void copy(const vector<double> &x, view1D<vector<double>, double> &y) {
  copy_core(x, y);
}
void copy(const vector<double> &x, view1D<matrix::Dense<double>, double> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<double>, double> &x, vector<double> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<double>, double> &x,
          view1D<vector<double>, double> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<double>, double> &x, vector<double> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<double>, double> &x,
          view1D<vector<double>, double> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  copy_core(x, y);
}
void copy(const vector<float> &x, vector<float> &y) { copy_core(x, y); }
void copy(const vector<float> &x, view1D<vector<float>, float> &y) {
  copy_core(x, y);
}
void copy(const vector<float> &x, view1D<matrix::Dense<float>, float> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<float>, float> &x, vector<float> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<float>, float> &x,
          view1D<vector<float>, float> &y) {
  copy_core(x, y);
}
void copy(const view1D<vector<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<float>, float> &x, vector<float> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<float>, float> &x,
          view1D<vector<float>, float> &y) {
  copy_core(x, y);
}
void copy(const view1D<matrix::Dense<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  copy_core(x, y);
}
//////////////////////////////////
double asum(const vector<double> &x) { return Dasum_core(x); }
double asum(const view1D<vector<double>, double> &x) { return Dasum_core(x); }
double asum(const view1D<matrix::Dense<double>, double> &x) {
  return Dasum_core(x);
}
float asum(const vector<float> &x) { return Sasum_core(x); }
float asum(const view1D<vector<float>, float> &x) { return Sasum_core(x); }
float asum(const view1D<matrix::Dense<float>, float> &x) {
  return Sasum_core(x);
}
//////////////////////////////////
void asum(const vector<double> &x, double &ans) { ans = asum(x); }
void asum(const view1D<vector<double>, double> &x, double &ans) {
  ans = asum(x);
}
void asum(const view1D<matrix::Dense<double>, double> &x, double &ans) {
  ans = asum(x);
}
void asum(const vector<float> &x, float &ans) { ans = asum(x); }
void asum(const view1D<vector<float>, float> &x, float &ans) { ans = asum(x); }
void asum(const view1D<matrix::Dense<float>, float> &x, float &ans) {
  ans = asum(x);
}
//////////////////////////////////
double sum(const vector<double> &x) { return Dsum_core(x); }
double sum(const view1D<vector<double>, double> &x) { return Dsum_core(x); }
double sum(const view1D<matrix::Dense<double>, double> &x) {
  return Dsum_core(x);
}
float sum(const vector<float> &x) { return Ssum_core(x); }
float sum(const view1D<vector<float>, float> &x) { return Ssum_core(x); }
float sum(const view1D<matrix::Dense<float>, float> &x) { return Ssum_core(x); }
//////////////////////////////////
void sum(const vector<double> &x, double &ans) { ans = sum(x); }
void sum(const view1D<vector<double>, double> &x, double &ans) { ans = sum(x); }
void sum(const view1D<matrix::Dense<double>, double> &x, double &ans) {
  ans = sum(x);
}
void sum(const vector<float> &x, float &ans) { ans = sum(x); }
void sum(const view1D<vector<float>, float> &x, float &ans) { ans = sum(x); }
void sum(const view1D<matrix::Dense<float>, float> &x, float &ans) {
  ans = sum(x);
}
//////////////////////////////////
void axpy(const double alpha, const vector<double> &x, vector<double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const vector<double> &x,
          view1D<vector<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const vector<double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<vector<double>, double> &x,
          vector<double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<vector<double>, double> &x,
          view1D<vector<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<vector<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          vector<double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          view1D<vector<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Daxpy_core(alpha, x, y);
}
void axpy(const float alpha, const vector<float> &x, vector<float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const vector<float> &x,
          view1D<vector<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const vector<float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<vector<float>, float> &x,
          vector<float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<vector<float>, float> &x,
          view1D<vector<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<vector<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          vector<float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          view1D<vector<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
void axpy(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Saxpy_core(alpha, x, y);
}
//////////////////////////////////
void axpyz(const double alpha, const vector<double> &x, const vector<double> &y,
           vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x, const vector<double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x, const vector<double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<vector<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<vector<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<vector<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<matrix::Dense<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const vector<double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const vector<double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const vector<double> &y, view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const vector<double> &y, view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<vector<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<vector<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<vector<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<vector<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const vector<double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const vector<double> &y, view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const vector<double> &y, view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<vector<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<vector<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<vector<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y, vector<double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<vector<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const double alpha, const view1D<matrix::Dense<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y,
           view1D<matrix::Dense<double>, double> &z) {
  Daxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x, const vector<float> &y,
           vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x, const vector<float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x, const vector<float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<vector<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<vector<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<vector<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<matrix::Dense<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const vector<float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const vector<float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const vector<float> &y, view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const vector<float> &y, view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<vector<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<vector<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<vector<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<vector<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const vector<float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const vector<float> &y, view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const vector<float> &y, view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<vector<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<vector<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<vector<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y, vector<float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<vector<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
void axpyz(const float alpha, const view1D<matrix::Dense<float>, float> &x,
           const view1D<matrix::Dense<float>, float> &y,
           view1D<matrix::Dense<float>, float> &z) {
  Saxpyz_core(alpha, x, y, z);
}
//////////////////////////////////
double dot(const vector<double> &x, const vector<double> &y) {
  return Ddot_core(x, y);
}
double dot(const vector<double> &x, const view1D<vector<double>, double> &y) {
  return Ddot_core(x, y);
}
double dot(const vector<double> &x,
           const view1D<matrix::Dense<double>, double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<vector<double>, double> &x, const vector<double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<vector<double>, double> &x,
           const view1D<vector<double>, double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<vector<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<matrix::Dense<double>, double> &x,
           const vector<double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<matrix::Dense<double>, double> &x,
           const view1D<vector<double>, double> &y) {
  return Ddot_core(x, y);
}
double dot(const view1D<matrix::Dense<double>, double> &x,
           const view1D<matrix::Dense<double>, double> &y) {
  return Ddot_core(x, y);
}
float dot(const vector<float> &x, const vector<float> &y) {
  return Sdot_core(x, y);
}
float dot(const vector<float> &x, const view1D<vector<float>, float> &y) {
  return Sdot_core(x, y);
}
float dot(const vector<float> &x,
          const view1D<matrix::Dense<float>, float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<vector<float>, float> &x, const vector<float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<vector<float>, float> &x,
          const view1D<vector<float>, float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<vector<float>, float> &x,
          const view1D<matrix::Dense<float>, float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<matrix::Dense<float>, float> &x,
          const vector<float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<matrix::Dense<float>, float> &x,
          const view1D<vector<float>, float> &y) {
  return Sdot_core(x, y);
}
float dot(const view1D<matrix::Dense<float>, float> &x,
          const view1D<matrix::Dense<float>, float> &y) {
  return Sdot_core(x, y);
}
//////////////////////////////////
void dot(const vector<double> &x, const vector<double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const vector<double> &x, const view1D<vector<double>, double> &y,
         double &ans) {
  ans = dot(x, y);
}
void dot(const vector<double> &x,
         const view1D<matrix::Dense<double>, double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<double>, double> &x, const vector<double> &y,
         double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<double>, double> &x,
         const view1D<vector<double>, double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<double>, double> &x,
         const view1D<matrix::Dense<double>, double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<double>, double> &x,
         const vector<double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<double>, double> &x,
         const view1D<vector<double>, double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<double>, double> &x,
         const view1D<matrix::Dense<double>, double> &y, double &ans) {
  ans = dot(x, y);
}
void dot(const vector<float> &x, const vector<float> &y, float &ans) {
  ans = dot(x, y);
}
void dot(const vector<float> &x, const view1D<vector<float>, float> &y,
         float &ans) {
  ans = dot(x, y);
}
void dot(const vector<float> &x, const view1D<matrix::Dense<float>, float> &y,
         float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<float>, float> &x, const vector<float> &y,
         float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<float>, float> &x,
         const view1D<vector<float>, float> &y, float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<vector<float>, float> &x,
         const view1D<matrix::Dense<float>, float> &y, float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<float>, float> &x, const vector<float> &y,
         float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<float>, float> &x,
         const view1D<vector<float>, float> &y, float &ans) {
  ans = dot(x, y);
}
void dot(const view1D<matrix::Dense<float>, float> &x,
         const view1D<matrix::Dense<float>, float> &y, float &ans) {
  ans = dot(x, y);
}
//////////////////////////////////
double nrm1(const vector<double> &x) { return Dnrm1_core(x); }
double nrm1(const view1D<vector<double>, double> &x) { return Dnrm1_core(x); }
double nrm1(const view1D<matrix::Dense<double>, double> &x) {
  return Dnrm1_core(x);
}
float nrm1(const vector<float> &x) { return Snrm1_core(x); }
float nrm1(const view1D<vector<float>, float> &x) { return Snrm1_core(x); }
float nrm1(const view1D<matrix::Dense<float>, float> &x) {
  return Snrm1_core(x);
}
//////////////////////////////////
void nrm1(const vector<double> &x, double &ans) { ans = nrm1(x); }
void nrm1(const view1D<vector<double>, double> &x, double &ans) {
  ans = nrm1(x);
}
void nrm1(const view1D<matrix::Dense<double>, double> &x, double &ans) {
  ans = nrm1(x);
}
void nrm1(const vector<float> &x, float &ans) { ans = nrm1(x); }
void nrm1(const view1D<vector<float>, float> &x, float &ans) { ans = nrm1(x); }
void nrm1(const view1D<matrix::Dense<float>, float> &x, float &ans) {
  ans = nrm1(x);
}
//////////////////////////////////
double nrm2(const vector<double> &x) { return Dnrm2_core(x); }
double nrm2(const view1D<vector<double>, double> &x) { return Dnrm2_core(x); }
double nrm2(const view1D<matrix::Dense<double>, double> &x) {
  return Dnrm2_core(x);
}
float nrm2(const vector<float> &x) { return Snrm2_core(x); }
float nrm2(const view1D<vector<float>, float> &x) { return Snrm2_core(x); }
float nrm2(const view1D<matrix::Dense<float>, float> &x) {
  return Snrm2_core(x);
}
//////////////////////////////////
void nrm2(const vector<double> &x, double &ans) { ans = nrm2(x); }
void nrm2(const view1D<vector<double>, double> &x, double &ans) {
  ans = nrm2(x);
}
void nrm2(const view1D<matrix::Dense<double>, double> &x, double &ans) {
  ans = nrm2(x);
}
void nrm2(const vector<float> &x, float &ans) { ans = nrm2(x); }
void nrm2(const view1D<vector<float>, float> &x, float &ans) { ans = nrm2(x); }
void nrm2(const view1D<matrix::Dense<float>, float> &x, float &ans) {
  ans = nrm2(x);
}
//////////////////////////////////
void scal(const double alpha, vector<double> &x) { Dscal_core(alpha, x); }
void scal(const double alpha, view1D<vector<double>, double> &x) {
  Dscal_core(alpha, x);
}
void scal(const double alpha, view1D<matrix::Dense<double>, double> &x) {
  Dscal_core(alpha, x);
}
void scal(const float alpha, vector<float> &x) { Sscal_core(alpha, x); }
void scal(const float alpha, view1D<vector<float>, float> &x) {
  Sscal_core(alpha, x);
}
void scal(const float alpha, view1D<matrix::Dense<float>, float> &x) {
  Sscal_core(alpha, x);
}
//////////////////////////////////
void xpay(const double alpha, const vector<double> &x, vector<double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const vector<double> &x,
          view1D<vector<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const vector<double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<vector<double>, double> &x,
          vector<double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<vector<double>, double> &x,
          view1D<vector<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<vector<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          vector<double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          view1D<vector<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const double alpha, const view1D<matrix::Dense<double>, double> &x,
          view1D<matrix::Dense<double>, double> &y) {
  Dxpay_core(alpha, x, y);
}
void xpay(const float alpha, const vector<float> &x, vector<float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const vector<float> &x,
          view1D<vector<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const vector<float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<vector<float>, float> &x,
          vector<float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<vector<float>, float> &x,
          view1D<vector<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<vector<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          vector<float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          view1D<vector<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
void xpay(const float alpha, const view1D<matrix::Dense<float>, float> &x,
          view1D<matrix::Dense<float>, float> &y) {
  Sxpay_core(alpha, x, y);
}
} // namespace monolish::blas
