#!/bin/bash
echo "// This code is generated by gen_vector_blas.sh
#include \"../internal/monolish_internal.hpp\"
#include \"allreduce.hpp\"
#include \"Bcast.hpp\"
#include \"Gather.hpp\"
#include \"Scatter.hpp\"
#include \"send_recv.hpp\"
#include \"isend_irecv.hpp\"

namespace monolish::mpi {"

echo "
void comm::set_comm(MPI_Comm external_comm) {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
  my_comm = external_comm; 
  logger.util_out();
}

void comm::Init() {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
#if defined MONOLISH_USE_MPI
  assert(MPI_Init(nullptr, nullptr) == MPI_SUCCESS);
  if (get_comm() == 0) {
    set_comm(MPI_COMM_WORLD);
  }
#endif
  logger.util_out();
}

void comm::Init(int argc, char **argv) {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
#if defined MONOLISH_USE_MPI
  assert(MPI_Init(&argc, &argv) == MPI_SUCCESS);
  if (get_comm() == 0) {
    set_comm(MPI_COMM_WORLD);
  }
#endif
  logger.util_out();
}

bool comm::Initialized() const {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
#if defined MONOLISH_USE_MPI
  int flag;
  assert(MPI_Initialized(&flag) == MPI_SUCCESS);
  logger.util_out();
  return (flag == 0) ? true : false;
#endif
  logger.util_out();
  return true;
}

void comm::Finalize() {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
#if defined MONOLISH_USE_MPI
  assert(MPI_Finalize() == MPI_SUCCESS);
#endif
  logger.util_out();
}

///////////////////////////////////////////////

int comm::get_rank() {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
  int rank = 0;
#if defined MONOLISH_USE_MPI
  MPI_Comm_rank(get_comm(), &rank);
  logger.util_out();
  return rank;
#endif
  logger.util_out();
  return rank;
}

int comm::get_size() {
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
  int size = 1;
#if defined MONOLISH_USE_MPI
  MPI_Comm_size(get_comm(), &size);
  logger.util_out();
  return size;
#endif
  logger.util_out();
  return size;
}

///////////////////////////////////////////////

void comm::Barrier() const{
  Logger &logger = Logger::get_instance();
  logger.util_in(monolish_func);
#if defined MONOLISH_USE_MPI
  MPI_Barrier(get_comm());
  logger.util_out();
#endif
  logger.util_out();
}

"

## Send
for type in double float int size_t; do
  echo "void comm::Send($type val, int dst, int tag) const{ Send_core(val, dst, tag, get_comm());}"
done

echo ""

## Send
for type in double float int size_t; do
  echo "void comm::Send(std::vector<$type> &vec, int dst, int tag) const{ Send_core(vec, dst, tag, get_comm());}"
done

echo ""

## Send
for type in double float; do
  echo "void comm::Send(monolish::vector<$type> &vec, int dst, int tag) const{ Send_core(vec, dst, tag, get_comm());}"
done

echo ""

##############################################################################

## Recv
for type in double float int size_t; do
  echo "MPI_Status comm::Recv($type val, int src, int tag) const{ return Recv_core(val, src, tag, get_comm());}"
done

echo ""

## Recv
for type in double float int size_t; do
  echo "MPI_Status comm::Recv(std::vector<$type> &vec, int src, int tag) const{ return Recv_core(vec, src, tag, get_comm());}"
done

echo ""

## Recv
for type in double float; do
  echo "MPI_Status comm::Recv(monolish::vector<$type> &vec, int src, int tag) const{ return Recv_core(vec, src, tag, get_comm());}"
done

echo ""

##############################################################################

## Isend
for type in double float int size_t; do
    echo "void comm::Isend($type val, int dst, int tag) { Isend_core(val, dst, tag, get_comm(), requests);}"
done

echo ""

## Isend
for type in double float int size_t; do
  echo "void comm::Isend(const std::vector<$type> &vec, int dst, int tag) { Isend_core(vec, dst, tag, get_comm(), requests);}"
done

echo ""

## Isend
for type in double float; do
    echo "void comm::Isend(const monolish::vector<$type> &vec, int dst, int tag) { Isend_core(vec, dst, tag, get_comm(), requests);}"
done

echo ""

##############################################################################

## Irecv
for type in double float int size_t; do
  echo "void comm::Irecv($type val, int src, int tag) { Irecv_core(val, src, tag, get_comm(), requests);}"
done

echo ""

## Irecv
for type in double float int size_t; do
  echo "void comm::Irecv(std::vector<$type> &vec, int src, int tag) { Irecv_core(vec, src, tag, get_comm(), requests);}"
done

echo ""

## Irecv
for type in double float; do
  echo "void comm::Irecv(monolish::vector<$type> &vec, int src, int tag) { Irecv_core(vec, src, tag, get_comm(), requests);}"
done

echo ""

##############################################################################

## Waitall
  echo "void comm::Waitall() { Waitall_core(requests);}"

echo ""

##############################################################################

## allreduce
for type in double float int size_t; do
    echo "$type comm::Allreduce($type val) const{ return Allreduce_core(val, MPI_SUM, get_comm() );}"
done

echo ""

## allreduce sum
for type in double float int size_t; do
  echo "$type comm::Allreduce_sum($type val) const{ return Allreduce_core(val, MPI_SUM, get_comm() );}"
done

echo ""

## allreduce prod
for type in double float int size_t; do
  echo "$type comm::Allreduce_prod($type val) const{ return Allreduce_core(val, MPI_PROD, get_comm() );}"
done

echo ""

## allreduce max
for type in double float int size_t; do
  echo "$type comm::Allreduce_max($type val) const{ return Allreduce_core(val, MPI_MAX, get_comm() );}"
done

echo ""

## allreduce min
for type in double float int size_t; do
  echo "$type comm::Allreduce_min($type val) const{ return Allreduce_core(val, MPI_MIN, get_comm() );}"
done

echo ""

##############################################################################

## Bcast
for type in double float int size_t; do
  echo "void comm::Bcast($type &val, int root) const{ Bcast_core(val, root, get_comm());}"
done

echo ""

## Bcast
for type in double float int size_t; do
  echo "void comm::Bcast(std::vector<$type> &vec, int root) const{ Bcast_core(vec, root, get_comm());}"
done

echo ""

## Bcast
for type in double float; do
  echo "void comm::Bcast(monolish::vector<$type> &vec, int root) const{ Bcast_core(vec, root, get_comm());}"
done

echo ""

##############################################################################

## Gather
for type in double float; do
  echo "void comm::Gather(monolish::vector<$type> &sendvec, monolish::vector<$type> &recvvec, int root) const{ Gather_core(sendvec, recvvec, root, get_comm());}"
done

echo ""

## Gather
for type in double float int size_t; do
  echo "void comm::Gather(std::vector<$type> &sendvec, std::vector<$type> &recvvec, int root) const{ Gather_core(sendvec, recvvec, root, get_comm());}"
done

echo ""

##############################################################################

## Scatter
for type in double float; do
  echo "void comm::Scatter(monolish::vector<$type> &sendvec, monolish::vector<$type> &recvvec, int root) const{ Scatter_core(sendvec, recvvec, root, get_comm());}"
done

echo ""

## Scatter
for type in double float int size_t; do
  echo "void comm::Scatter(std::vector<$type> &sendvec, std::vector<$type> &recvvec, int root) const{ Scatter_core(sendvec, recvvec, root, get_comm());}"
done

echo "
}" 

