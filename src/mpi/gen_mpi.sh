#!/bin/bash
echo "// This code is generated by gen_vector_blas.sh
#include \"../internal/monolish_internal.hpp\"
#include \"allreduce.hpp\"

namespace monolish {
namespace mpi {
"

echo "
    void Comm::Init() {
#if defined MONOLISH_USE_MPI
      assert(MPI_Init(nullptr, nullptr) == MPI_SUCCESS);
#endif
    }

    void Comm::Init(int argc, char **argv) {
#if defined MONOLISH_USE_MPI
      assert(MPI_Init(&argc, &argv) == MPI_SUCCESS);
#endif
    }

    bool Comm::Initialized() {
#if defined MONOLISH_USE_MPI
      int flag;
      assert(MPI_Initialized(&flag) == MPI_SUCCESS);
      return ( flag == 0 ) ? true : false;
#endif
    return true;
    }

    void Comm::Finalize() {
#if defined MONOLISH_USE_MPI
      assert(MPI_Finalize() == MPI_SUCCESS);
#endif
    }
"

## allreduce
for type in double float int size_t; do
    echo "$type Comm::Allreduce($type val){ return Allreduce_core(val, MPI_SUM, get_comm() );}"
done

echo ""

## allreduce sum
for type in double float int size_t; do
  echo "$type Comm::Allreduce_sum($type val){ return Allreduce_core(val, MPI_SUM, get_comm() );}"
done

echo ""

## allreduce prod
for type in double float int size_t; do
  echo "$type Comm::Allreduce_prod($type val){ return Allreduce_core(val, MPI_PROD, get_comm() );}"
done

echo ""

## allreduce max
for type in double float int size_t; do
  echo "$type Comm::Allreduce_max($type val){ return Allreduce_core(val, MPI_MAX, get_comm() );}"
done

echo ""

## allreduce min
for type in double float int size_t; do
  echo "$type Comm::Allreduce_min($type val){ return Allreduce_core(val, MPI_MIN, get_comm() );}"
done

echo ""

echo "
} // namespace mpi
} // namespace monolish"

