//this code is generated by gen_matrix_vml.sh
#include "../../../include/monolish_vml.hpp"
#include "../../internal/monolish_internal.hpp"
#include "./arithmetic/matadd.hpp"
#include "./arithmetic/matsub.hpp"
#include "./arithmetic/matmul.hpp"
#include "./arithmetic/matdiv.hpp"
#include "./math_2op/matasin.hpp"
#include "./math_2op/matasinh.hpp"
#include "./math_2op/matatan.hpp"
#include "./math_2op/matatanh.hpp"
#include "./math_2op/matfloor.hpp"
#include "./math_2op/matreciprocal.hpp"
#include "./math_2op/matsign.hpp"
#include "./math_2op/matsin.hpp"
#include "./math_2op/matsinh.hpp"
#include "./math_2op/matsqrt.hpp"
#include "./math_2op/matceil.hpp"
#include "./math_2op/mattan.hpp"
#include "./math_2op/mattanh.hpp"
#include "./math_1_3op/matmax.hpp"
#include "./math_1_3op/matmin.hpp"
#include "./math_1_3op/matpow.hpp"

namespace monolish {
namespace vml {

void add(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmadd_core(A, B, C);}
void add(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmadd_core(A, B, C);}
void sub(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmsub_core(A, B, C);}
void sub(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmsub_core(A, B, C);}
void mul(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmmul_core(A, B, C);}
void mul(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmmul_core(A, B, C);}
void div(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmdiv_core(A, B, C);}
void div(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmdiv_core(A, B, C);}

void add(const matrix::Dense<double> &A, const double alpha, matrix::Dense<double> &C){smadd_core(A, alpha, C);}
void add(const matrix::Dense<float> &A, const float alpha, matrix::Dense<float> &C){smadd_core(A, alpha, C);}
void sub(const matrix::Dense<double> &A, const double alpha, matrix::Dense<double> &C){smsub_core(A, alpha, C);}
void sub(const matrix::Dense<float> &A, const float alpha, matrix::Dense<float> &C){smsub_core(A, alpha, C);}
void mul(const matrix::Dense<double> &A, const double alpha, matrix::Dense<double> &C){smmul_core(A, alpha, C);}
void mul(const matrix::Dense<float> &A, const float alpha, matrix::Dense<float> &C){smmul_core(A, alpha, C);}
void div(const matrix::Dense<double> &A, const double alpha, matrix::Dense<double> &C){smdiv_core(A, alpha, C);}
void div(const matrix::Dense<float> &A, const float alpha, matrix::Dense<float> &C){smdiv_core(A, alpha, C);}

void pow(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmpow_core(A, B, C);}
void pow(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmpow_core(A, B, C);}
void pow(const matrix::Dense<double> &A, const double alpha, matrix::Dense<double> &C){smpow_core(A, alpha, C);}
void pow(const matrix::Dense<float> &A, const float alpha, matrix::Dense<float> &C){smpow_core(A, alpha, C);}

void sin(const matrix::Dense<double> &A, matrix::Dense<double> &C){msin_core(A, C);}
void sin(const matrix::Dense<float> &A, matrix::Dense<float> &C){msin_core(A, C);}
void sqrt(const matrix::Dense<double> &A, matrix::Dense<double> &C){msqrt_core(A, C);}
void sqrt(const matrix::Dense<float> &A, matrix::Dense<float> &C){msqrt_core(A, C);}
void sinh(const matrix::Dense<double> &A, matrix::Dense<double> &C){msinh_core(A, C);}
void sinh(const matrix::Dense<float> &A, matrix::Dense<float> &C){msinh_core(A, C);}
void asin(const matrix::Dense<double> &A, matrix::Dense<double> &C){masin_core(A, C);}
void asin(const matrix::Dense<float> &A, matrix::Dense<float> &C){masin_core(A, C);}
void asinh(const matrix::Dense<double> &A, matrix::Dense<double> &C){masinh_core(A, C);}
void asinh(const matrix::Dense<float> &A, matrix::Dense<float> &C){masinh_core(A, C);}
void tan(const matrix::Dense<double> &A, matrix::Dense<double> &C){mtan_core(A, C);}
void tan(const matrix::Dense<float> &A, matrix::Dense<float> &C){mtan_core(A, C);}
void tanh(const matrix::Dense<double> &A, matrix::Dense<double> &C){mtanh_core(A, C);}
void tanh(const matrix::Dense<float> &A, matrix::Dense<float> &C){mtanh_core(A, C);}
void atan(const matrix::Dense<double> &A, matrix::Dense<double> &C){matan_core(A, C);}
void atan(const matrix::Dense<float> &A, matrix::Dense<float> &C){matan_core(A, C);}
void atanh(const matrix::Dense<double> &A, matrix::Dense<double> &C){matanh_core(A, C);}
void atanh(const matrix::Dense<float> &A, matrix::Dense<float> &C){matanh_core(A, C);}
void ceil(const matrix::Dense<double> &A, matrix::Dense<double> &C){mceil_core(A, C);}
void ceil(const matrix::Dense<float> &A, matrix::Dense<float> &C){mceil_core(A, C);}
void floor(const matrix::Dense<double> &A, matrix::Dense<double> &C){mfloor_core(A, C);}
void floor(const matrix::Dense<float> &A, matrix::Dense<float> &C){mfloor_core(A, C);}
void sign(const matrix::Dense<double> &A, matrix::Dense<double> &C){msign_core(A, C);}
void sign(const matrix::Dense<float> &A, matrix::Dense<float> &C){msign_core(A, C);}
void reciprocal(const matrix::Dense<double> &A, matrix::Dense<double> &C){mreciprocal_core(A, C);}
void reciprocal(const matrix::Dense<float> &A, matrix::Dense<float> &C){mreciprocal_core(A, C);}

void max(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmmax_core(A, B, C);}
void max(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmmax_core(A, B, C);}
void min(const matrix::Dense<double> &A, const matrix::Dense<double> &B, matrix::Dense<double> &C){mmmin_core(A, B, C);}
void min(const matrix::Dense<float> &A, const matrix::Dense<float> &B, matrix::Dense<float> &C){mmmin_core(A, B, C);}

double max(const matrix::Dense<double> &C){return mmax_core<matrix::Dense<double>,double>(C);}
float max(const matrix::Dense<float> &C){return mmax_core<matrix::Dense<float>,float>(C);}
double min(const matrix::Dense<double> &C){return mmin_core<matrix::Dense<double>,double>(C);}
float min(const matrix::Dense<float> &C){return mmin_core<matrix::Dense<float>,float>(C);}

void add(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmadd_core(A, B, C);}
void add(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmadd_core(A, B, C);}
void sub(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmsub_core(A, B, C);}
void sub(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmsub_core(A, B, C);}
void mul(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmmul_core(A, B, C);}
void mul(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmmul_core(A, B, C);}
void div(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmdiv_core(A, B, C);}
void div(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmdiv_core(A, B, C);}

void add(const matrix::CRS<double> &A, const double alpha, matrix::CRS<double> &C){smadd_core(A, alpha, C);}
void add(const matrix::CRS<float> &A, const float alpha, matrix::CRS<float> &C){smadd_core(A, alpha, C);}
void sub(const matrix::CRS<double> &A, const double alpha, matrix::CRS<double> &C){smsub_core(A, alpha, C);}
void sub(const matrix::CRS<float> &A, const float alpha, matrix::CRS<float> &C){smsub_core(A, alpha, C);}
void mul(const matrix::CRS<double> &A, const double alpha, matrix::CRS<double> &C){smmul_core(A, alpha, C);}
void mul(const matrix::CRS<float> &A, const float alpha, matrix::CRS<float> &C){smmul_core(A, alpha, C);}
void div(const matrix::CRS<double> &A, const double alpha, matrix::CRS<double> &C){smdiv_core(A, alpha, C);}
void div(const matrix::CRS<float> &A, const float alpha, matrix::CRS<float> &C){smdiv_core(A, alpha, C);}

void pow(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmpow_core(A, B, C);}
void pow(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmpow_core(A, B, C);}
void pow(const matrix::CRS<double> &A, const double alpha, matrix::CRS<double> &C){smpow_core(A, alpha, C);}
void pow(const matrix::CRS<float> &A, const float alpha, matrix::CRS<float> &C){smpow_core(A, alpha, C);}

void sin(const matrix::CRS<double> &A, matrix::CRS<double> &C){msin_core(A, C);}
void sin(const matrix::CRS<float> &A, matrix::CRS<float> &C){msin_core(A, C);}
void sqrt(const matrix::CRS<double> &A, matrix::CRS<double> &C){msqrt_core(A, C);}
void sqrt(const matrix::CRS<float> &A, matrix::CRS<float> &C){msqrt_core(A, C);}
void sinh(const matrix::CRS<double> &A, matrix::CRS<double> &C){msinh_core(A, C);}
void sinh(const matrix::CRS<float> &A, matrix::CRS<float> &C){msinh_core(A, C);}
void asin(const matrix::CRS<double> &A, matrix::CRS<double> &C){masin_core(A, C);}
void asin(const matrix::CRS<float> &A, matrix::CRS<float> &C){masin_core(A, C);}
void asinh(const matrix::CRS<double> &A, matrix::CRS<double> &C){masinh_core(A, C);}
void asinh(const matrix::CRS<float> &A, matrix::CRS<float> &C){masinh_core(A, C);}
void tan(const matrix::CRS<double> &A, matrix::CRS<double> &C){mtan_core(A, C);}
void tan(const matrix::CRS<float> &A, matrix::CRS<float> &C){mtan_core(A, C);}
void tanh(const matrix::CRS<double> &A, matrix::CRS<double> &C){mtanh_core(A, C);}
void tanh(const matrix::CRS<float> &A, matrix::CRS<float> &C){mtanh_core(A, C);}
void atan(const matrix::CRS<double> &A, matrix::CRS<double> &C){matan_core(A, C);}
void atan(const matrix::CRS<float> &A, matrix::CRS<float> &C){matan_core(A, C);}
void atanh(const matrix::CRS<double> &A, matrix::CRS<double> &C){matanh_core(A, C);}
void atanh(const matrix::CRS<float> &A, matrix::CRS<float> &C){matanh_core(A, C);}
void ceil(const matrix::CRS<double> &A, matrix::CRS<double> &C){mceil_core(A, C);}
void ceil(const matrix::CRS<float> &A, matrix::CRS<float> &C){mceil_core(A, C);}
void floor(const matrix::CRS<double> &A, matrix::CRS<double> &C){mfloor_core(A, C);}
void floor(const matrix::CRS<float> &A, matrix::CRS<float> &C){mfloor_core(A, C);}
void sign(const matrix::CRS<double> &A, matrix::CRS<double> &C){msign_core(A, C);}
void sign(const matrix::CRS<float> &A, matrix::CRS<float> &C){msign_core(A, C);}
void reciprocal(const matrix::CRS<double> &A, matrix::CRS<double> &C){mreciprocal_core(A, C);}
void reciprocal(const matrix::CRS<float> &A, matrix::CRS<float> &C){mreciprocal_core(A, C);}

void max(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmmax_core(A, B, C);}
void max(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmmax_core(A, B, C);}
void min(const matrix::CRS<double> &A, const matrix::CRS<double> &B, matrix::CRS<double> &C){mmmin_core(A, B, C);}
void min(const matrix::CRS<float> &A, const matrix::CRS<float> &B, matrix::CRS<float> &C){mmmin_core(A, B, C);}

double max(const matrix::CRS<double> &C){return mmax_core<matrix::CRS<double>,double>(C);}
float max(const matrix::CRS<float> &C){return mmax_core<matrix::CRS<float>,float>(C);}
double min(const matrix::CRS<double> &C){return mmin_core<matrix::CRS<double>,double>(C);}
float min(const matrix::CRS<float> &C){return mmin_core<matrix::CRS<float>,float>(C);}


} // namespace blas
} // namespace monolish 
