#!/bin/bash
echo "//this code is generated by gen_tensor_vml.sh
#include \"../../../include/monolish_vml.hpp\"
#include \"../../internal/monolish_internal.hpp\"
#include \"./arithmetic/tensadd.hpp\"
#include \"./arithmetic/tenssub.hpp\"
#include \"./arithmetic/tensmul.hpp\"
#include \"./arithmetic/tensdiv.hpp\"
#include \"./math_2op/tensasin.hpp\"
#include \"./math_2op/tensasinh.hpp\"
#include \"./math_2op/tensatan.hpp\"
#include \"./math_2op/tensatanh.hpp\"
#include \"./math_2op/tensfloor.hpp\"
#include \"./math_2op/tensreciprocal.hpp\"
#include \"./math_2op/tenssign.hpp\"
#include \"./math_2op/tenssin.hpp\"
#include \"./math_2op/tenssinh.hpp\"
#include \"./math_2op/tenssqrt.hpp\"
#include \"./math_2op/tensceil.hpp\"
#include \"./math_2op/tenstan.hpp\"
#include \"./math_2op/tenstanh.hpp\"
#include \"./math_2op/tensexp.hpp\"
#include \"./math_2op/tensalo.hpp\"
#include \"./math_1_3op/tensmax.hpp\"
#include \"./math_1_3op/tensmin.hpp\"
#include \"./math_1_3op/tenspow.hpp\"

namespace monolish {
namespace vml {
"

for MAT in tensor_Dense
do

## $MAT tensor-tensor arithmetic
funcs=(add sub mul div)
for func in ${funcs[@]}; do
  for prec in double float; do
    echo "void ${func}(const tensor::$MAT<$prec> &A, const tensor::$MAT<$prec> &B, tensor::$MAT<$prec> &C){tt${func}_core(A, B, C);}"
  done
done

echo ""
################################################################

## $MAT tensor-scalar arithmetic
funcs=(add sub mul div)
for func in ${funcs[@]}; do
  for prec in double float; do
    echo "void ${func}(const tensor::$MAT<$prec> &A, const $prec alpha, tensor::$MAT<$prec> &C){st${func}_core(A, alpha, C);}"
  done
done

echo ""
#############################################

## tensor-tensor pow
for prec in double float; do
  echo "void pow(const tensor::$MAT<$prec> &A, const tensor::$MAT<$prec> &B, tensor::$MAT<$prec> &C){ttpow_core(A, B, C);}"
done

## tensor-scalar pow
for prec in double float; do
  echo "void pow(const tensor::$MAT<$prec> &A, const $prec alpha, tensor::$MAT<$prec> &C){stpow_core(A, alpha, C);}"
done

echo ""
#############################################

## tensor alo
for prec in double float; do
  echo "void alo(const tensor::$MAT<$prec> &A, const $prec alpha, const $prec beta, tensor::$MAT<$prec> &C){talo_core(A, alpha, beta, C);}"
done

echo ""
#############################################
## 2arg math
math=(sin sqrt sinh asin asinh tan tanh atan atanh ceil floor sign reciprocal exp)
for math in ${math[@]}; do
  for prec in double float; do
    echo "void $math(const tensor::$MAT<$prec> &A, tensor::$MAT<$prec> &C){t${math}_core(A, C);}"
  done
done

echo ""
#############################################

## tensor-tensor max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    echo "void ${func}(const tensor::$MAT<$prec> &A, const tensor::$MAT<$prec> &B, tensor::$MAT<$prec> &C){tt${func}_core(A, B, C);}"
  done
done

echo ""

## tensor-scalar max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    echo "void ${func}(const tensor::$MAT<$prec> &A, const $prec alpha, tensor::$MAT<$prec> &C){st${func}_core(A, alpha, C);}"
  done
done

echo ""

## $MAT tensor max min
detail=(greatest smallest)
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    echo "$prec ${func}(const tensor::$MAT<$prec> &C){return t${func}_core<tensor::$MAT<$prec>,$prec>(C);}"
  done
done

echo ""
#############################################

done # $MAT, CRS

echo "
} // namespace vml
} // namespace monolish "
