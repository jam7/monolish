// this code is generated by gen_tensor_vml.sh
#include "../../../include/monolish_vml.hpp"
#include "../../internal/monolish_internal.hpp"
#include "./arithmetic/tensadd.hpp"
#include "./arithmetic/tensdiv.hpp"
#include "./arithmetic/tensmul.hpp"
#include "./arithmetic/tenssub.hpp"
#include "./math_1_3op/tensmax.hpp"
#include "./math_1_3op/tensmin.hpp"
#include "./math_1_3op/tenspow.hpp"
#include "./math_2op/tensalo.hpp"
#include "./math_2op/tensasin.hpp"
#include "./math_2op/tensasinh.hpp"
#include "./math_2op/tensatan.hpp"
#include "./math_2op/tensatanh.hpp"
#include "./math_2op/tensceil.hpp"
#include "./math_2op/tensexp.hpp"
#include "./math_2op/tensfloor.hpp"
#include "./math_2op/tensreciprocal.hpp"
#include "./math_2op/tenssign.hpp"
#include "./math_2op/tenssin.hpp"
#include "./math_2op/tenssinh.hpp"
#include "./math_2op/tenssqrt.hpp"
#include "./math_2op/tenstan.hpp"
#include "./math_2op/tenstanh.hpp"

namespace monolish {
namespace vml {

void add(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttadd_core(A, B, C);
}
void add(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttadd_core(A, B, C);
}
void sub(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttsub_core(A, B, C);
}
void sub(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttsub_core(A, B, C);
}
void mul(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttmul_core(A, B, C);
}
void mul(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttmul_core(A, B, C);
}
void div(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttdiv_core(A, B, C);
}
void div(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttdiv_core(A, B, C);
}

void add(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stadd_core(A, alpha, C);
}
void add(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stadd_core(A, alpha, C);
}
void sub(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stsub_core(A, alpha, C);
}
void sub(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stsub_core(A, alpha, C);
}
void mul(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stmul_core(A, alpha, C);
}
void mul(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stmul_core(A, alpha, C);
}
void div(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stdiv_core(A, alpha, C);
}
void div(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stdiv_core(A, alpha, C);
}

void pow(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttpow_core(A, B, C);
}
void pow(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttpow_core(A, B, C);
}
void pow(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stpow_core(A, alpha, C);
}
void pow(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stpow_core(A, alpha, C);
}

void alo(const tensor::tensor_Dense<double> &A, const double alpha,
         const double beta, tensor::tensor_Dense<double> &C) {
  talo_core(A, alpha, beta, C);
}
void alo(const tensor::tensor_Dense<float> &A, const float alpha,
         const float beta, tensor::tensor_Dense<float> &C) {
  talo_core(A, alpha, beta, C);
}

void sin(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C) {
  tsin_core(A, C);
}
void sin(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C) {
  tsin_core(A, C);
}
void sqrt(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tsqrt_core(A, C);
}
void sqrt(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tsqrt_core(A, C);
}
void sinh(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tsinh_core(A, C);
}
void sinh(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tsinh_core(A, C);
}
void asin(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tasin_core(A, C);
}
void asin(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tasin_core(A, C);
}
void asinh(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C) {
  tasinh_core(A, C);
}
void asinh(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C) {
  tasinh_core(A, C);
}
void tan(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C) {
  ttan_core(A, C);
}
void tan(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C) {
  ttan_core(A, C);
}
void tanh(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  ttanh_core(A, C);
}
void tanh(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  ttanh_core(A, C);
}
void atan(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tatan_core(A, C);
}
void atan(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tatan_core(A, C);
}
void atanh(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C) {
  tatanh_core(A, C);
}
void atanh(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C) {
  tatanh_core(A, C);
}
void ceil(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tceil_core(A, C);
}
void ceil(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tceil_core(A, C);
}
void floor(const tensor::tensor_Dense<double> &A,
           tensor::tensor_Dense<double> &C) {
  tfloor_core(A, C);
}
void floor(const tensor::tensor_Dense<float> &A,
           tensor::tensor_Dense<float> &C) {
  tfloor_core(A, C);
}
void sign(const tensor::tensor_Dense<double> &A,
          tensor::tensor_Dense<double> &C) {
  tsign_core(A, C);
}
void sign(const tensor::tensor_Dense<float> &A,
          tensor::tensor_Dense<float> &C) {
  tsign_core(A, C);
}
void reciprocal(const tensor::tensor_Dense<double> &A,
                tensor::tensor_Dense<double> &C) {
  treciprocal_core(A, C);
}
void reciprocal(const tensor::tensor_Dense<float> &A,
                tensor::tensor_Dense<float> &C) {
  treciprocal_core(A, C);
}
void exp(const tensor::tensor_Dense<double> &A,
         tensor::tensor_Dense<double> &C) {
  texp_core(A, C);
}
void exp(const tensor::tensor_Dense<float> &A, tensor::tensor_Dense<float> &C) {
  texp_core(A, C);
}

void max(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttmax_core(A, B, C);
}
void max(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttmax_core(A, B, C);
}
void min(const tensor::tensor_Dense<double> &A,
         const tensor::tensor_Dense<double> &B,
         tensor::tensor_Dense<double> &C) {
  ttmin_core(A, B, C);
}
void min(const tensor::tensor_Dense<float> &A,
         const tensor::tensor_Dense<float> &B, tensor::tensor_Dense<float> &C) {
  ttmin_core(A, B, C);
}

void max(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stmax_core(A, alpha, C);
}
void max(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stmax_core(A, alpha, C);
}
void min(const tensor::tensor_Dense<double> &A, const double alpha,
         tensor::tensor_Dense<double> &C) {
  stmin_core(A, alpha, C);
}
void min(const tensor::tensor_Dense<float> &A, const float alpha,
         tensor::tensor_Dense<float> &C) {
  stmin_core(A, alpha, C);
}

double max(const tensor::tensor_Dense<double> &C) {
  return tmax_core<tensor::tensor_Dense<double>, double>(C);
}
float max(const tensor::tensor_Dense<float> &C) {
  return tmax_core<tensor::tensor_Dense<float>, float>(C);
}
double min(const tensor::tensor_Dense<double> &C) {
  return tmin_core<tensor::tensor_Dense<double>, double>(C);
}
float min(const tensor::tensor_Dense<float> &C) {
  return tmin_core<tensor::tensor_Dense<float>, float>(C);
}

} // namespace vml
} // namespace monolish
