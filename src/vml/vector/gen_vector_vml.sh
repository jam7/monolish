#!/bin/bash
echo "//this code is generated by gen_vector_vml.sh
#include \"../../../include/monolish_vml.hpp\"
#include \"../../internal/monolish_internal.hpp\"
#include \"./arithmetic/vecadd.hpp\"
#include \"./arithmetic/vecsub.hpp\"
#include \"./arithmetic/vecmul.hpp\"
#include \"./arithmetic/vecdiv.hpp\"

namespace monolish {
namespace vml {
"
## vector-vector arithmetic
funcs=(add sub mul div)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
          echo "void $func(const $arg1 &a, const $arg2 &b, $arg3 &y){vv${func}_core(a, b, y);}"
        done
      done
    done
  done
done

echo ""

## scalar-vector arithmetic
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        echo "void $func(const $arg1 &a, const $prec alpha, $arg2 &y){sv${func}_core(a, alpha, y);}"
      done
    done
  done
done

echo ""
#############################################

## vector-vector pow
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        echo "void pow(const $arg1 &a, const $arg2 &b, $arg3 &y);"
      done
    done
  done
done

echo ""

## scalar-vector pow
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void pow(const $arg1 &a, const $prec alpha, $arg2 &y);"
    done
  done
done

echo ""
#############################################


## 2arg math
math=(sin sqrt sinh asin asinh tan tanh atan atanh ceil floor sign)
for math in ${math[@]}; do
  for prec in double float; do
    for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        echo "void $math(const $arg1 &a, $arg2 &y);"
      done
    done
  done
done

echo ""
#############################################

## vector-vector max min
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
        for arg3 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
          echo "void ${func[$i]}(const $arg1 &a, const $arg2 &b, $arg3 &y);"
        done
      done
    done
  done
done

echo ""

## vector max min
funcs=(max min)
for func in ${funcs[@]}; do
  for prec in double float; do
    for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "$prec ${func[$i]}(const $arg1 &y);"
    done
  done
done

echo ""
#############################################

## reciprocal
math=reciprocal
for prec in double float; do
  for arg1 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
    for arg2 in vector\<$prec\> view1D\<vector\<$prec\>,$prec\> view1D\<matrix::Dense\<$prec\>,$prec\>; do
      echo "void $math(const $arg1 &a, $arg2 &y);"
    done
  done
done

echo "
} // namespace blas
} // namespace monolish "
